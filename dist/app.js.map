{"version":3,"sources":["api/index.js","app.js"],"names":["getProjectById","getData","id","url","cacheVersion","cacheStorage","caches","open","data","fetch","then","json","deleteOldCaches","put","cachedData","getCachedData","cacheName","cachedResponse","match","ok","currentCache","keys","key","isOurCache","substr","delete","root","document","getElementById","renderWidget","template","fields","wrapper","createElement","classList","add","map","row","rowDOM","find","el","name","i","length","itemDOM","replace","value","link","linkValue","innerHTML","append","console","log","styles","dataset","style","setProperty","primaryColor","secondaryColor","templateSlug"],"mappings":";AAgDC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EAhDM,MAAMA,EAAiB,MAAA,SACfC,4DAAwDC,KAEvE,eAAeD,EAAQE,GACfC,MAGAC,QAAqBC,OAAOC,KAFf,iBAGf,IACIC,MAAAA,EAAOC,MAAMN,GAChBO,KAAMF,GAASA,EAAKG,QACpBD,KAAMF,GAASA,GAGXA,aAFDI,EAPW,uBAQXP,EAAaQ,IAAIV,EAAKK,GACrBA,EACP,MACMM,MAAAA,QAAmBC,EAXR,gBAWiCZ,GAC9CW,GAAAA,EACKA,OAAAA,GAMb,eAAeC,EAAcC,EAAWb,GAChCE,MAAAA,QAAqBC,OAAOC,KAAKS,GACjCC,QAAuBZ,EAAaa,MAAMf,GAE5C,SAACc,IAAmBA,EAAeE,WAI1BF,EAAeN,OAI9B,eAAeC,EAAgBQ,GACvBC,MAAAA,QAAaf,OAAOe,OAErB,IAAA,MAAMC,KAAOD,EAAM,CAChBE,MAAAA,EAAa,iBAAmBD,EAAIE,OAAO,EAAG,GAEhDJ,IAAiBE,GAAQC,GAI7BjB,OAAOmB,OAAOH,IAEjB,QAAA,eAAA;;;;ACND,aA1CA,IAAA,EAAA,QAAA,SAwCA,EAAA,EAAA,QAAA,6BAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAxCA,MAAMI,EAAOC,SAASC,eAAe,cAErC,SAASC,EAAaH,EAAMI,EAAUC,GAC9BC,MAAAA,EAAUL,SAASM,cAAc,OACvCD,EAAQE,UAAUC,IAAIL,GAEtBC,EAAOK,IAAKC,IACJC,MAAAA,EAASX,SAASM,cAAc,OACtCK,EAAOJ,UAAUC,IAAI,QACJE,EAAIE,KAAMC,GAAkB,eAAXA,EAAGC,MACrBJ,EAAIE,KAAMC,GAAkB,cAAXA,EAAGC,MAC/B,IAAA,IAAIC,EAAI,EAAGA,EAAIL,EAAIM,OAAQD,IAAK,CAC/BE,IAAAA,EAAU,KAIVP,IAHJO,EAAUjB,SAASM,cAAc,QACzBC,UAAUC,IAAIE,EAAIK,GAAGD,KAAKI,QAAQ,IAAK,MAE5B,eAAfR,EAAIK,GAAGD,MAAyBJ,EAAIK,GAAGI,MAAO,CAC1CC,MAAAA,EAAOV,EAAIE,KAAMC,GAAkB,cAAXA,EAAGC,MAC7BO,IAAAA,EAAY,KACZD,IACFC,EAAYD,EAAKD,OAAS,KAE5BF,EAAQK,sBAAwBF,MAASV,EAAIK,GAAGI,gBAC3C,CAAA,GAAmB,cAAfT,EAAIK,GAAGD,KAChB,SACwB,aAAfJ,EAAIK,GAAGD,KAChBG,EAAQK,sCAAwCZ,EAAIK,GAAGI,OACrD,uCAEFF,EAAQK,UAAYZ,EAAIK,GAAGI,MAE7BR,EAAOY,OAAON,GAEhBZ,EAAQkB,OAAOZ,KAGjBZ,EAAKwB,OAAOlB,IAId,iBACEmB,QAAQC,IAAIC,EAAZ,SACA3B,EAAKuB,2BACMI,EAAO,yBAEZ7C,MAAAA,QAAa,EAAekB,EAAAA,gBAAAA,EAAK4B,QAAL,cAClC5B,EAAK6B,MAAMC,YAAY,kBAAmBhD,EAAKiD,cAC/C/B,EAAK6B,MAAMC,YAAY,oBAAqBhD,EAAKkD,gBACjD7B,EAAaH,EAAMlB,EAAKmD,aAAcnD,EAAKuB,QAR7C","file":"app.js","sourceRoot":"..","sourcesContent":["export const getProjectById = async (id) => {\n  return await getData(`${process.env.LAMBDA_ENDPOINT}/projects/data/${id}`);\n};\nasync function getData(url) {\n  const cacheVersion = 1;\n  const cacheName = `embedtables-${cacheVersion}`;\n\n  const cacheStorage = await caches.open(cacheName);\n  try {\n    const data = fetch(url)\n      .then((data) => data.json())\n      .then((data) => data);\n    await deleteOldCaches(cacheName);\n    await cacheStorage.put(url, data);\n    return data;\n  } catch {\n    const cachedData = await getCachedData(cacheName, url);\n    if (cachedData) {\n      return cachedData;\n    }\n  }\n}\n\n// Get data from the cache.\nasync function getCachedData(cacheName, url) {\n  const cacheStorage = await caches.open(cacheName);\n  const cachedResponse = await cacheStorage.match(url);\n\n  if (!cachedResponse || !cachedResponse.ok) {\n    return false;\n  }\n\n  return await cachedResponse.json();\n}\n\n// Delete any old caches to respect user's disk space.\nasync function deleteOldCaches(currentCache) {\n  const keys = await caches.keys();\n\n  for (const key of keys) {\n    const isOurCache = \"embedtables-\" === key.substr(0, 6);\n\n    if (currentCache === key || !isOurCache) {\n      continue;\n    }\n\n    caches.delete(key);\n  }\n}\n","import { getProjectById } from \"./api\";\n\nconst root = document.getElementById(\"embedTable\");\n\nfunction renderWidget(root, template, fields) {\n  const wrapper = document.createElement(\"div\");\n  wrapper.classList.add(template);\n\n  fields.map((row) => {\n    const rowDOM = document.createElement(\"div\");\n    rowDOM.classList.add(\"item\");\n    let buttonText = row.find((el) => el.name == \"Button_text\");\n    let buttonUrl = row.find((el) => el.name == \"Button_url\");\n    for (let i = 0; i < row.length; i++) {\n      let itemDOM = null;\n      itemDOM = document.createElement(\"div\");\n      itemDOM.classList.add(row[i].name.replace(\" \", \"-\"));\n\n      if (row[i].name == \"Button_text\" && row[i].value) {\n        const link = row.find((el) => el.name == \"Button_url\");\n        let linkValue = null;\n        if (link) {\n          linkValue = link.value || \"/\";\n        }\n        itemDOM.innerHTML = `<a href='${link}'>${row[i].value}</a>`;\n      } else if (row[i].name == \"Button_url\") {\n        continue;\n      } else if (row[i].name == \"Image_url\") {\n        itemDOM.innerHTML = `<img loading=\"lazy\" src='${row[i].value ||\n          \"https://via.placeholder.com/150\"}'/>`;\n      } else {\n        itemDOM.innerHTML = row[i].value;\n      }\n      rowDOM.append(itemDOM);\n    }\n    wrapper.append(rowDOM);\n  });\n\n  root.append(wrapper);\n}\nimport styles from \"./et-templates-style.css\";\n\n(async function() {\n  console.log(styles);\n  root.innerHTML += `\n    <style>${styles}</style> \n    `;\n  const data = await getProjectById(root.dataset[\"embedtableid\"]);\n  root.style.setProperty(\"--primary-color\", data.primaryColor);\n  root.style.setProperty(\"--secondary-color\", data.secondaryColor);\n  renderWidget(root, data.templateSlug, data.fields);\n})();\n"]}